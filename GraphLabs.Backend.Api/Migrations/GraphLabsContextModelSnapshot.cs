// <auto-generated />
using System;
using GraphLabs.Backend.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace GraphLabs.Backend.Api.Migrations
{
    [DbContext(typeof(GraphLabsContext))]
    partial class GraphLabsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("GraphLabs.Backend.Domain.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<long>("SubjectId");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("TaskModules");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<long>("TaskModuleId");

                    b.Property<string>("VariantData");

                    b.HasKey("Id");

                    b.HasIndex("TaskModuleId");

                    b.ToTable("TaskVariants");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskVariantLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action")
                        .IsRequired();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("Penalty");

                    b.Property<long>("StudentId");

                    b.Property<long>("VariantId");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("StudentId");

                    b.HasIndex("VariantId");

                    b.ToTable("TaskVariantLogs");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<bool>("IsRight");

                    b.Property<long>("TestQuestionVersionId");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionVersionId");

                    b.ToTable("TestAnswers");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("TestQuestions");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestQuestionVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Difficulty");

                    b.Property<int>("MaxScore");

                    b.Property<string>("PlainText");

                    b.Property<long>("TestQuestionId");

                    b.HasKey("Id");

                    b.HasIndex("TestQuestionId");

                    b.ToTable("TestQuestionVersions");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateTime");

                    b.Property<int>("MarkEU");

                    b.Property<int>("MarkRU");

                    b.Property<int>("Score");

                    b.Property<long>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("DateTime");

                    b.HasIndex("StudentId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestStudentAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<long>("AnswerId");

                    b.Property<bool>("IsRight");

                    b.Property<long>("TestResultId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TestResultId");

                    b.ToTable("TestStudentAnswers");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FatherName");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.Student", b =>
                {
                    b.HasBaseType("GraphLabs.Backend.Domain.User");

                    b.Property<string>("Group");

                    b.HasIndex("Group");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.Teacher", b =>
                {
                    b.HasBaseType("GraphLabs.Backend.Domain.User");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskModule", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.Subject", "Subject")
                        .WithMany("TaskModules")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskVariant", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.TaskModule", "TaskModule")
                        .WithMany("Variants")
                        .HasForeignKey("TaskModuleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TaskVariantLog", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.Student", "Student")
                        .WithMany("Logs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GraphLabs.Backend.Domain.TaskVariant", "Variant")
                        .WithMany("Logs")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestAnswer", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.TestQuestionVersion", "TestQuestionVersion")
                        .WithMany("TestAnswers")
                        .HasForeignKey("TestQuestionVersionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestQuestion", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.Subject", "Subject")
                        .WithMany("TestQuestions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestQuestionVersion", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.TestQuestion", "TestQuestion")
                        .WithMany("TestQuestionVersions")
                        .HasForeignKey("TestQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestResult", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.Student", "Student")
                        .WithMany("TestResults")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GraphLabs.Backend.Domain.TestStudentAnswer", b =>
                {
                    b.HasOne("GraphLabs.Backend.Domain.TestQuestionVersion", "TestQuestionVersion")
                        .WithMany("TestStudentAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GraphLabs.Backend.Domain.TestResult", "TestResult")
                        .WithMany("TestStudentAnswer")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
